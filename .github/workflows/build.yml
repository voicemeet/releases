name: Weekly Build
on:
  schedule:
    - cron: '0 1 * * 6' # At 01:00 AM, only on Saturday, UTC
  # Enable manual run
  workflow_dispatch:

# Declare default permissions as readonly.
permissions: read-all

env:
  repository: 'VoiceMeet/voicemeet'
  main-path: 'main'
  source-path: 'voicemeet'

jobs:
  create-release:
    name: Create release
    runs-on: ubuntu-22.04
    outputs:
      flutter_channel: ${{ steps.flutter_version_step.outputs.flutter_channel }}
      flutter_version: ${{ steps.flutter_version_step.outputs.flutter_version }}
      sha: ${{ steps.sha_step.outputs.sha }}
      version: ${{ steps.version_step.outputs.version }}
      build_number: ${{ steps.version_step.outputs.build_number }}
      nightly_date: ${{ steps.version_step.outputs.nightly_date }}
      release: ${{ steps.version_step.outputs.release }}
      tag_name: ${{ steps.version_step.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          path: ${{ env.main-path }}

      - uses: actions/checkout@v4
        with:
          repository: ${{ env.repository }}
          token: ${{ secrets.VM_RELEASE_TOKEN }}
          path: ${{ env.source-path }}

      - name: Set flutter version
        id: flutter_version_step
        run: |
          flutter_channel=$(sed -n -E "s/.*flutter-channel:\ '(.*)'/\1/p" .github/workflows/release.yml|head -n1)
          flutter_version=$(sed -n -E "s/.*flutter-version:\ '(.*)'/\1/p" .github/workflows/release.yml|head -n1)
          echo "flutter_channel: $flutter_channel, flutter_version: $flutter_version."

          echo "flutter_channel=$flutter_channel" >> $GITHUB_OUTPUT
          echo "flutter_version=$flutter_version" >> $GITHUB_OUTPUT
        working-directory: ${{ env.source-path }}

      - name: Set sha
        id: sha_step
        run: |
          SHA=$(git rev-parse HEAD)
          echo "SHA: $SHA."

          echo "sha=$SHA" >> $GITHUB_OUTPUT
        working-directory: ${{ env.main-path }}

      - name: Set sha from source
        id: sha_source_step
        run: |
          sha_source=$(git rev-parse HEAD)
          echo "sha_source: $sha_source."

          echo "sha_source=$sha_source" >> $GITHUB_OUTPUT
        working-directory: ${{ env.source-path }}

      - name: Set version
        id: version_step
        run: |
          VERSION=0.0.0
          echo "VERSION: $VERSION."

          BUILD_NUMBER=$(date '+%Y%m%d')
          echo "BUILD_NUMBER: $BUILD_NUMBER."
          
          NIGHTLY_DATE=$(date '+%Y.%m.%d')
          echo "NIGHTLY_DATE: $NIGHTLY_DATE"
          
          SUFFIX=weekly
          FULL_VERSION="$VERSION-0.$SUFFIX.$NIGHTLY_DATE"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "nightly_date=$NIGHTLY_DATE" >> $GITHUB_OUTPUT
          echo "release=$FULL_VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=v$FULL_VERSION" >> $GITHUB_OUTPUT

      - name: Create a release
        run: |
          RELEASE_NOTES="Release based on [voicemeet](https://github.com/${{ env.repository }}/commit/${{ steps.sha_source_step.outputs.sha_source }}) created by [releases](https://github.com/${{ github.repository }}) workflow run [#${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }})<br/><br/>Please refer to [CHANGELOG.md](https://voicemeet.io/changelog) for details."
          gh release create "$TAG_NAME" --draft --latest=false --prerelease=false --target "$SHA" --title "Weekly build ${{ env.nightly_date }}" --notes "$RELEASE_NOTES"
        env:
          SHA: ${{ steps.sha_step.outputs.sha }}
          TAG_NAME: ${{ steps.version_step.outputs.tag_name }}
          nightly_date: ${{ steps.version_step.outputs.nightly_date }}
          GH_TOKEN: ${{ secrets.VM_RELEASE_TOKEN }}
        working-directory: ${{ env.main-path }}

  publish:
    name: Publish
    runs-on: ubuntu-22.04
    needs:
      - create-release
      - apk
      - aab
      - ios
      - macos-dmg
      - macos-pkg
      - macos-pkg-appstore
      - macos-zip
      - macos-tar
      - windows-exe
      - windows-msi
      - windows-msix
      - windows-zip
    steps:
      - uses: actions/checkout@v4
        with:
          path: ${{ env.main-path }}

      - name: Publish a release
        run: |
          gh release edit "$TAG_NAME" --prerelease --draft=false --tag "$TAG_NAME" --target "$SHA"
        env:
          SHA: ${{ needs.create-release.outputs.sha }}
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.VM_RELEASE_TOKEN }}
        working-directory: ${{ env.main-path }}

  apk:
    name: Create apk
    runs-on: ubuntu-22.04
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4
        with:
          path: ${{ env.main-path }}

      - uses: actions/checkout@v4
        with:
          repository: ${{ env.repository }}
          token: ${{ secrets.VM_RELEASE_TOKEN }}
          path: ${{ env.source-path }}

      - uses: actions/setup-java@v4
        with:
          java-version: "17.x"
          distribution: 'temurin'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ needs.create-release.outputs.flutter_channel }}
          flutter-version: ${{ needs.create-release.outputs.flutter_version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: echo "$ENV_STG_BASE64" | base64 --decode > .env
        env:
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
        working-directory: ${{ env.source-path }}

      - name: Install Deps
        run: flutter pub get
        working-directory: ${{ env.source-path }}

      - name: Configure Keystore for Android
        run: |
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
          echo "storeFile=upload-keystore.jks" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
        working-directory: ${{ env.source-path }}/android

      # Build the application.
      - name: Build apk
        run: flutter build apk --dart-define-from-file=.env --no-tree-shake-icons --flavor staging --build-name=$VERSION --build-number $BUILD_NUMBER
        env:
          VERSION: ${{ needs.create-release.outputs.version }}
          BUILD_NUMBER: ${{ needs.create-release.outputs.build_number }}
        working-directory: ${{ env.source-path }}

      # Package the build.
      - name: Copy build for Android
        run: cp app-staging-release.apk $GITHUB_WORKSPACE/${{ env.main-path }}/VoiceMeet-$RELEASE.apk
        working-directory: ${{ env.source-path }}/build/app/outputs/flutter-apk
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.apk
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.VM_RELEASE_TOKEN }}
        working-directory: ${{ env.main-path }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f android/app/upload-keystore.jks
          rm -f android/key.properties
          rm -f .env
        working-directory: ${{ env.source-path }}

  aab:
    name: Create appbundle
    runs-on: ubuntu-22.04
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4
        with:
          path: ${{ env.main-path }}

      - uses: actions/checkout@v4
        with:
          repository: ${{ env.repository }}
          token: ${{ secrets.VM_RELEASE_TOKEN }}
          path: ${{ env.source-path }}

      - uses: actions/setup-java@v4
        with:
          java-version: "17.x"
          distribution: 'temurin'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ needs.create-release.outputs.flutter_channel }}
          flutter-version: ${{ needs.create-release.outputs.flutter_version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: echo "$ENV_STG_BASE64" | base64 --decode > .env
        env:
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
        working-directory: ${{ env.source-path }}

      - name: Install Deps
        run: flutter pub get
        working-directory: ${{ env.source-path }}

      - name: Configure Keystore for Android
        run: |
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
          echo "storeFile=upload-keystore.jks" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
        working-directory: ${{ env.source-path }}/android

      # Build the application.
      - name: Build appbundle
        run: flutter build appbundle --dart-define-from-file=.env --no-tree-shake-icons --flavor staging --build-name=$VERSION --build-number $BUILD_NUMBER
        env:
          VERSION: ${{ needs.create-release.outputs.version }}
          BUILD_NUMBER: ${{ needs.create-release.outputs.build_number }}
        working-directory: ${{ env.source-path }}

      # Package the build.
      - name: Copy build for Android
        run: cp *.aab $GITHUB_WORKSPACE/${{ env.main-path }}/VoiceMeet-$RELEASE.aab
        working-directory: ${{ env.source-path }}/build/app/outputs/bundle/stagingRelease
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.aab
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.VM_RELEASE_TOKEN }}
        working-directory: ${{ env.main-path }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f android/app/upload-keystore.jks
          rm -f android/key.properties
          rm -f .env
        working-directory: ${{ env.source-path }}

  ios:
    name: Create ios
    runs-on: macos-15
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4
        with:
          path: ${{ env.main-path }}

      - uses: actions/checkout@v4
        with:
          repository: ${{ env.repository }}
          token: ${{ secrets.VM_RELEASE_TOKEN }}
          path: ${{ env.source-path }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ needs.create-release.outputs.flutter_channel }}
          flutter-version: ${{ needs.create-release.outputs.flutter_version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: echo "$ENV_STG_BASE64" | base64 --decode > .env
        env:
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
        working-directory: ${{ env.source-path }}

      - name: Resolving flutter dependencies
        run: flutter pub get
        working-directory: ${{ env.source-path }}

      - name: Resolving ios dependencies
        run: pod install --repo-update
        working-directory: ${{ env.source-path }}/ios

      - name: Install the Apple certificate and provisioning profile
        env:
          P12_DEV_BASE64: ${{ secrets.P12_DEV_BASE64 }}
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          PROVISION_PROFILE_DEV_BASE64: ${{ secrets.PROVISION_PROFILE_DEV_BASE64 }}
          PROVISION_PROFILE_BASE64: ${{ secrets.PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_DEV_PATH=$RUNNER_TEMP/build_certificate_dev.p12
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_DEV_PATH=$RUNNER_TEMP/voicemeet_dev.mobileprovision
          PP_PATH=$RUNNER_TEMP/voicemeet_appstore.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/kty-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$P12_DEV_BASE64" | base64 --decode --output $CERTIFICATE_DEV_PATH
          echo -n "$P12_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$PROVISION_PROFILE_DEV_BASE64" | base64 --decode --output $PP_DEV_PATH
          echo -n "$PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_DEV_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          mv $PP_DEV_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          mv $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Remove build cache
        run: xcodebuild clean
        working-directory: ${{ env.source-path }}/ios

      - name: Build ipa
        run: flutter build ipa --dart-define-from-file=.env --export-options-plist=ios/ExportOptions/debug.plist --build-name=$VERSION --build-number $BUILD_NUMBER
        env:
          VERSION: ${{ needs.create-release.outputs.version }}
          BUILD_NUMBER: ${{ needs.create-release.outputs.build_number }}
        working-directory: ${{ env.source-path }}

      # Package the build.
      - name: Copy build for iOS
        run: cp *.ipa $GITHUB_WORKSPACE/${{ env.main-path }}/VoiceMeet-$RELEASE.ipa
        working-directory: ${{ env.source-path }}/build/ios/ipa
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.ipa
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.VM_RELEASE_TOKEN }}
        working-directory: ${{ env.main-path }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/kty-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/kty-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/kty-signing.keychain-db
          fi
          rm -f ~/Library/MobileDevice/Provisioning\ Profiles/voicemeet_*.mobileprovision
          rm -f .env
        working-directory: ${{ env.source-path }}

  macos-dmg:
    name: Create macos dmg
    runs-on: macos-15
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4
        with:
          path: ${{ env.main-path }}

      - uses: actions/checkout@v4
        with:
          repository: ${{ env.repository }}
          token: ${{ secrets.VM_RELEASE_TOKEN }}
          path: ${{ env.source-path }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ needs.create-release.outputs.flutter_channel }}
          flutter-version: ${{ needs.create-release.outputs.flutter_version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: echo "$ENV_STG_BASE64" | base64 --decode > .env
        env:
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
        working-directory: ${{ env.source-path }}

      - name: Resolving flutter dependencies
        run: flutter pub get
        working-directory: ${{ env.source-path }}

      - name: Resolving macos dependencies
        run: pod install --repo-update
        working-directory: ${{ env.source-path }}/macos

      - name: Remove build cache
        run: xcodebuild clean
        working-directory: ${{ env.source-path }}/macos

      - name: Build macOS
        run: flutter build macos --dart-define-from-file=.env --build-name=$VERSION --build-number $BUILD_NUMBER
        env:
          VERSION: ${{ needs.create-release.outputs.version }}
          BUILD_NUMBER: ${{ needs.create-release.outputs.build_number }}
        working-directory: ${{ env.source-path }}

      - name: Install certificates
        env:
          DEVELOPER_ID_APPLICATION_P12_BASE64_MAC: ${{ secrets.DEVELOPER_ID_APPLICATION_P12_BASE64_MAC }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/build_developerID_application_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/kty-signing.keychain-db
          
          # import certificate and provisioning profile from secrets
          echo -n "$DEVELOPER_ID_APPLICATION_P12_BASE64_MAC" | base64 --decode --output $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # security default-keychain -s $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # import certificate to keychain
          security import $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Code Signing
        run: /usr/bin/codesign --deep --force -s "$DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY" --options runtime VoiceMeet.app -v
        working-directory: ${{ env.source-path }}/build/macos/Build/Products/Release
        env:
          DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY }}

      - name: Notarize app
        run: |
          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service
          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "VoiceMeet.app" "VoiceMeet.zip"

          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious
          echo "Notarize app"
          xcrun notarytool submit "VoiceMeet.zip" --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$APPLE_PASSWORD" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "VoiceMeet.app"
        working-directory: ${{ env.source-path }}/build/macos/Build/Products/Release
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Build DMG
        run: |
          bash scripts/build-dmg.sh
          mv VoiceMeet.dmg $GITHUB_WORKSPACE/${{ env.main-path }}/VoiceMeet-"$RELEASE"-macos-universal.dmg
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}
        working-directory: ${{ env.source-path }}

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.dmg
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.VM_RELEASE_TOKEN }}
        working-directory: ${{ env.main-path }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/kty-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/kty-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/kty-signing.keychain-db
          fi
          rm -f .env
        working-directory: ${{ env.source-path }}

  macos-pkg:
    name: Create macos pkg
    runs-on: macos-15
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4
        with:
          path: ${{ env.main-path }}

      - uses: actions/checkout@v4
        with:
          repository: ${{ env.repository }}
          token: ${{ secrets.VM_RELEASE_TOKEN }}
          path: ${{ env.source-path }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ needs.create-release.outputs.flutter_channel }}
          flutter-version: ${{ needs.create-release.outputs.flutter_version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: echo "$ENV_STG_BASE64" | base64 --decode > .env
        env:
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
        working-directory: ${{ env.source-path }}

      - name: Resolving flutter dependencies
        run: flutter pub get
        working-directory: ${{ env.source-path }}

      - name: Resolving macos dependencies
        run: pod install --repo-update
        working-directory: ${{ env.source-path }}/macos

      - name: Remove build cache
        run: xcodebuild clean
        working-directory: ${{ env.source-path }}/macos

      - name: Build macOS
        run: flutter build macos --dart-define-from-file=.env --build-name=$VERSION --build-number $BUILD_NUMBER
        env:
          VERSION: ${{ needs.create-release.outputs.version }}
          BUILD_NUMBER: ${{ needs.create-release.outputs.build_number }}
        working-directory: ${{ env.source-path }}

      - name: Install certificates
        run: |
          # create variables
          DEVELOPER_ID_INSTALLER_CERTIFICATE_PATH=$RUNNER_TEMP/build_developerID_installer_certificate.p12
          DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/build_developerID_application_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/kty-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$DEVELOPER_ID_INSTALLER_P12_BASE64_MAC" | base64 --decode --output $DEVELOPER_ID_INSTALLER_CERTIFICATE_PATH
          echo -n "$DEVELOPER_ID_APPLICATION_P12_BASE64_MAC" | base64 --decode --output $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $DEVELOPER_ID_INSTALLER_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        env:
          DEVELOPER_ID_INSTALLER_P12_BASE64_MAC: ${{ secrets.DEVELOPER_ID_INSTALLER_P12_BASE64_MAC }}
          DEVELOPER_ID_APPLICATION_P12_BASE64_MAC: ${{ secrets.DEVELOPER_ID_APPLICATION_P12_BASE64_MAC }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Code Signing
        run: |
          # https://stackoverflow.com/questions/70991268/how-to-sign-and-notarize-a-pkg-within-a-github-actions-macos-runner
          bash scripts/codesign-pkg.sh "$DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY"
        env:
          DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY }}
        working-directory: ${{ env.source-path }}

      - name: Build pkg
        run: |
          # https://www.hexnode.com/mobile-device-management/help/how-to-sign-macos-pkg-files-for-deployment-with-hexnode-mdm/
          xcrun pkgbuild --component "./VoiceMeet.app" --install-location /Applications --sign "$DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY" VoiceMeet-unsigned.pkg
          mv VoiceMeet-unsigned.pkg "$GITHUB_WORKSPACE/${{ env.source-path }}/VoiceMeet-unsigned.pkg"
        env:
          DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY }}
        working-directory: ${{ env.source-path }}/build/macos/Build/Products/Release

      - name: Building distribution file
        run: |
          xcrun productbuild --synthesize --product macos/packaging/pkg/requirements --package VoiceMeet-unsigned.pkg distribution.dist
          sed -i '' '2 a\
          \    <title>VoiceMeet</title>\
          \    <license file="eula.rtf"/>\
          ' distribution.dist
        working-directory: ${{ env.source-path }}

      - name: Sign pkg
        run: |
          # https://www.hexnode.com/mobile-device-management/help/how-to-sign-macos-pkg-files-for-deployment-with-hexnode-mdm/
          xcrun productbuild --distribution distribution.dist --resources macos/packaging/base --sign "$DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY" VoiceMeet.pkg
        env:
          DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY }}
        working-directory: ${{ env.source-path }}

      - name: Notarize & Staple
        run: |
          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious
          echo "Notarize pkg"
          xcrun notarytool submit "VoiceMeet.pkg" --apple-id "$APPLE_ID" --password "$APPLE_PASSWORD" --team-id "$APPLE_TEAM_ID" --output-format "json" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "VoiceMeet.pkg"
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        working-directory: ${{ env.source-path }}

      # Package the build.
      - name: Copy build for pkg
        run: |
          test -f VoiceMeet-unsigned.pkg && rm -f VoiceMeet-unsigned.pkg
          mv VoiceMeet.pkg $GITHUB_WORKSPACE/${{ env.main-path }}/VoiceMeet-"$RELEASE"-macos-universal.pkg
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}
        working-directory: ${{ env.source-path }}

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.pkg
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.VM_RELEASE_TOKEN }}
        working-directory: ${{ env.main-path }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/kty-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/kty-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/kty-signing.keychain-db
          fi
          rm -f .env
        working-directory: ${{ env.source-path }}

  macos-pkg-appstore:
    name: Create macos pkg (appstore)
    runs-on: macos-15
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4
        with:
          path: ${{ env.main-path }}

      - uses: actions/checkout@v4
        with:
          repository: ${{ env.repository }}
          token: ${{ secrets.VM_RELEASE_TOKEN }}
          path: ${{ env.source-path }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ needs.create-release.outputs.flutter_channel }}
          flutter-version: ${{ needs.create-release.outputs.flutter_version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: echo "$ENV_STG_BASE64" | base64 --decode > .env
        env:
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
        working-directory: ${{ env.source-path }}

      - name: Resolving flutter dependencies
        run: flutter pub get
        working-directory: ${{ env.source-path }}

      - name: Resolving macos dependencies
        run: pod install --repo-update
        working-directory: ${{ env.source-path }}/macos

      - name: Remove build cache
        run: xcodebuild clean
        working-directory: ${{ env.source-path }}/macos

      - name: Build macOS
        run: flutter build macos --dart-define-from-file=.env --build-name=$VERSION --build-number $BUILD_NUMBER
        env:
          VERSION: ${{ needs.create-release.outputs.version }}
          BUILD_NUMBER: ${{ needs.create-release.outputs.build_number }}
        working-directory: ${{ env.source-path }}

      - name: Install certificates
        run: |
          # create variables
          # Mac Installer Distribution
          THIRD_PARTY_MAC_DEVELOPER_INSTALLER_CERTIFICATE_PATH=$RUNNER_TEMP/build_mac_developer_installer_certificate.p12
          # Mac App Distribution
          THIRD_PARTY_MAC_DEVELOPER_APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/build_mac_developer_application_certificate.p12
          THIRD_PARTY_MAC_DEVELOPER_APPLICATION_PP_PATH=$RUNNER_TEMP/voicemeet_mac_appstore.provisionprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/kty-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$THIRD_PARTY_MAC_DEVELOPER_INSTALLER_P12_BASE64_MAC" | base64 --decode --output $THIRD_PARTY_MAC_DEVELOPER_INSTALLER_CERTIFICATE_PATH
          echo -n "$THIRD_PARTY_MAC_DEVELOPER_APPLICATION_P12_BASE64_MAC" | base64 --decode --output $THIRD_PARTY_MAC_DEVELOPER_APPLICATION_CERTIFICATE_PATH
          echo -n "$THIRD_PARTY_MAC_DEVELOPER_APPLICATION_PROVISION_PROFILE_BASE64_MAC" | base64 --decode --output $THIRD_PARTY_MAC_DEVELOPER_APPLICATION_PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $THIRD_PARTY_MAC_DEVELOPER_INSTALLER_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $THIRD_PARTY_MAC_DEVELOPER_APPLICATION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # apply provisioning profile
          # https://developer.apple.com/documentation/bundleresources/placing_content_in_a_bundle/
          # security cms -D -i voicemeet_mac_appstore.provisionprofile
          mv $THIRD_PARTY_MAC_DEVELOPER_APPLICATION_PP_PATH build/macos/Build/Products/Release/VoiceMeet.app/Contents/embedded.provisionprofile
        env:
          THIRD_PARTY_MAC_DEVELOPER_INSTALLER_P12_BASE64_MAC: ${{ secrets.THIRD_PARTY_MAC_DEVELOPER_INSTALLER_P12_BASE64_MAC }}
          THIRD_PARTY_MAC_DEVELOPER_APPLICATION_P12_BASE64_MAC: ${{ secrets.THIRD_PARTY_MAC_DEVELOPER_APPLICATION_P12_BASE64_MAC }}
          THIRD_PARTY_MAC_DEVELOPER_APPLICATION_PROVISION_PROFILE_BASE64_MAC: ${{ secrets.THIRD_PARTY_MAC_DEVELOPER_APPLICATION_PROVISION_PROFILE_BASE64_MAC }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        working-directory: ${{ env.source-path }}

      - name: Code Signing
        run: |
          # https://stackoverflow.com/questions/70991268/how-to-sign-and-notarize-a-pkg-within-a-github-actions-macos-runner
          # https://developer.apple.com/forums/thread/733942
          # https://stackoverflow.com/questions/60384835/dyld-library-not-loaded-code-signature-invalid
          # codesign -dvvv VoiceMeet.app
          # https://lessons.livecode.com/a/876834-signing-and-uploading-apps-to-the-mac-app-store
          
          # 1. Code sign executables
          echo "Code sign executables"
          /usr/bin/codesign --deep --force --sign "$THIRD_PARTY_MAC_DEVELOPER_APPLICATION_SIGNING_IDENTITY" build/macos/Build/Products/Release/VoiceMeet.app
          
          # 2. Code sign entitlements.plist
          echo "Code sign entitlements.plist"
          /usr/bin/codesign --force --sign "$THIRD_PARTY_MAC_DEVELOPER_APPLICATION_SIGNING_IDENTITY" --entitlements macos/Runner/AppStore-Release.entitlements build/macos/Build/Products/Release/VoiceMeet.app
          
          # 3. Just to confirm all is well, verify the code signing
          # No response means that there were no errors and it is code signed.
          # /usr/bin/codesign --verify build/macos/Build/Products/Release/VoiceMeet.app
        env:
          THIRD_PARTY_MAC_DEVELOPER_APPLICATION_SIGNING_IDENTITY: ${{ secrets.THIRD_PARTY_MAC_DEVELOPER_APPLICATION_SIGNING_IDENTITY }}
        working-directory: ${{ env.source-path }}

      - name: Create pkg
        run: |
          # https://www.hexnode.com/mobile-device-management/help/how-to-sign-macos-pkg-files-for-deployment-with-hexnode-mdm/
          # [Test the installer].  (Note the "-target /" that comes after the path to the pkg file)
          # It will go through the installation process to confirm that the installer package is OK.
          # NOTE: If the app is signed for distribution to the Mac App Store the resulting app will not run locally.
          # sudo installer -store -package <path_to_app_pkg_file> -target /
          xcrun productbuild --sign "$THIRD_PARTY_MAC_DEVELOPER_INSTALLER_SIGNING_IDENTITY" --component VoiceMeet.app /Applications VoiceMeet.pkg
        env:
          THIRD_PARTY_MAC_DEVELOPER_INSTALLER_SIGNING_IDENTITY: ${{ secrets.THIRD_PARTY_MAC_DEVELOPER_INSTALLER_SIGNING_IDENTITY }}
        working-directory: ${{ env.source-path }}/build/macos/Build/Products/Release

      # Package the build.
      - name: Copy build for pkg
        run: cp VoiceMeet.pkg $GITHUB_WORKSPACE/${{ env.main-path }}/VoiceMeet-"$RELEASE"-macos-appstore-universal.pkg
        working-directory: ${{ env.source-path }}/build/macos/Build/Products/Release
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.pkg
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.VM_RELEASE_TOKEN }}
        working-directory: ${{ env.main-path }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/kty-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/kty-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/kty-signing.keychain-db
          fi
          rm -f .env
        working-directory: ${{ env.source-path }}

  macos-zip:
    name: Create macos zip
    runs-on: macos-15
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4
        with:
          path: ${{ env.main-path }}

      - uses: actions/checkout@v4
        with:
          repository: ${{ env.repository }}
          token: ${{ secrets.VM_RELEASE_TOKEN }}
          path: ${{ env.source-path }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ needs.create-release.outputs.flutter_channel }}
          flutter-version: ${{ needs.create-release.outputs.flutter_version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: echo "$ENV_STG_BASE64" | base64 --decode > .env
        env:
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
        working-directory: ${{ env.source-path }}

      - name: Resolving flutter dependencies
        run: flutter pub get
        working-directory: ${{ env.source-path }}

      - name: Resolving macos dependencies
        run: pod install --repo-update
        working-directory: ${{ env.source-path }}/macos

      - name: Remove build cache
        run: xcodebuild clean
        working-directory: ${{ env.source-path }}/macos

      - name: Build macOS
        run: flutter build macos --dart-define-from-file=.env --build-name=$VERSION --build-number $BUILD_NUMBER
        env:
          VERSION: ${{ needs.create-release.outputs.version }}
          BUILD_NUMBER: ${{ needs.create-release.outputs.build_number }}
        working-directory: ${{ env.source-path }}

      - name: Install certificates
        env:
          DEVELOPER_ID_APPLICATION_P12_BASE64_MAC: ${{ secrets.DEVELOPER_ID_APPLICATION_P12_BASE64_MAC }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/build_developerID_application_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/kty-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$DEVELOPER_ID_APPLICATION_P12_BASE64_MAC" | base64 --decode --output $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # security default-keychain -s $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Code Signing
        run: /usr/bin/codesign --deep --force -s "$DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY" --options runtime VoiceMeet.app -v
        working-directory: ${{ env.source-path }}/build/macos/Build/Products/Release
        env:
          DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY }}

      - name: Notarize app
        run: |
          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service
          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "VoiceMeet.app" "VoiceMeet.zip"

          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious
          echo "Notarize app"
          xcrun notarytool submit "VoiceMeet.zip" --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$APPLE_PASSWORD" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "VoiceMeet.app"
        working-directory: ${{ env.source-path }}/build/macos/Build/Products/Release
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Install p7zip
        run: |
          if ! command -v 7z >/dev/null 2>&1; then
            echo "7z not exists"
            brew install p7zip
          fi

      - name: Build zip
        run: 7z a VoiceMeet-"$RELEASE"-macos-universal.zip ./VoiceMeet.app
        working-directory: ${{ env.source-path }}/build/macos/Build/Products/Release
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for zip
        run: mv VoiceMeet-*-macos-universal.zip $GITHUB_WORKSPACE/${{ env.main-path }}/
        working-directory: ${{ env.source-path }}/build/macos/Build/Products/Release

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.zip
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.VM_RELEASE_TOKEN }}
        working-directory: ${{ env.main-path }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/kty-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/kty-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/kty-signing.keychain-db
          fi
          rm -f .env
        working-directory: ${{ env.source-path }}

  macos-tar:
    name: Create macos tar
    runs-on: macos-15
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4
        with:
          path: ${{ env.main-path }}

      - uses: actions/checkout@v4
        with:
          repository: ${{ env.repository }}
          token: ${{ secrets.VM_RELEASE_TOKEN }}
          path: ${{ env.source-path }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ needs.create-release.outputs.flutter_channel }}
          flutter-version: ${{ needs.create-release.outputs.flutter_version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: echo "$ENV_STG_BASE64" | base64 --decode > .env
        env:
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64 }}
        working-directory: ${{ env.source-path }}

      - name: Resolving flutter dependencies
        run: flutter pub get
        working-directory: ${{ env.source-path }}

      - name: Resolving macos dependencies
        run: pod install --repo-update
        working-directory: ${{ env.source-path }}/macos

      - name: Remove build cache
        run: xcodebuild clean
        working-directory: ${{ env.source-path }}/macos

      - name: Build macOS
        run: flutter build macos --dart-define-from-file=.env --build-name=$VERSION --build-number $BUILD_NUMBER
        env:
          VERSION: ${{ needs.create-release.outputs.version }}
          BUILD_NUMBER: ${{ needs.create-release.outputs.build_number }}
        working-directory: ${{ env.source-path }}

      - name: Install certificates
        env:
          DEVELOPER_ID_APPLICATION_P12_BASE64_MAC: ${{ secrets.DEVELOPER_ID_APPLICATION_P12_BASE64_MAC }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/build_developerID_application_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/kty-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$DEVELOPER_ID_APPLICATION_P12_BASE64_MAC" | base64 --decode --output $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # security default-keychain -s $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Code Signing
        run: /usr/bin/codesign --deep --force -s "$DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY" --options runtime VoiceMeet.app -v
        working-directory: ${{ env.source-path }}/build/macos/Build/Products/Release
        env:
          DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY }}

      - name: Notarize app
        run: |
          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service
          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "VoiceMeet.app" "VoiceMeet.zip"

          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious
          echo "Notarize app"
          xcrun notarytool submit "VoiceMeet.zip" --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$APPLE_PASSWORD" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "VoiceMeet.app"
        working-directory: ${{ env.source-path }}/build/macos/Build/Products/Release
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Build tar
        run: tar -czaf VoiceMeet-"$RELEASE"-macos-universal.tar.gz ./VoiceMeet.app
        working-directory: ${{ env.source-path }}/build/macos/Build/Products/Release
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}

      # Package the build.
      - name: Copy build for tar
        run: mv *.tar.gz $GITHUB_WORKSPACE/${{ env.main-path }}/
        working-directory: ${{ env.source-path }}/build/macos/Build/Products/Release

      - name: Upload assets
        run: gh release upload "$TAG_NAME" ./*.tar.gz
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.VM_RELEASE_TOKEN }}
        working-directory: ${{ env.main-path }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/kty-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/kty-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/kty-signing.keychain-db
          fi
          rm -f .env
        working-directory: ${{ env.source-path }}

  windows-exe:
    name: Create windows exe
    runs-on: windows-2022
    env:
      Platform: x64
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4
        with:
          path: ${{ env.main-path }}

      - uses: actions/checkout@v4
        with:
          repository: ${{ env.repository }}
          token: ${{ secrets.VM_RELEASE_TOKEN }}
          path: ${{ env.source-path }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ needs.create-release.outputs.flutter_channel }}
          flutter-version: ${{ needs.create-release.outputs.flutter_version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          $bytes = echo "$env:ENV_STG_BASE64" | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$pwd\.env", $bytes)
        env:
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64_WINDOWS }}
        working-directory: ${{ env.source-path }}

      - name: copy eula.rtf to the windows folder
        run: Copy-Item -Path "$pwd\macos\packaging\base\eula.rtf" -Destination "$pwd\windows\LICENSE.rtf" -Force
        working-directory: ${{ env.source-path }}

      - name: Copy ChineseSimplified.isl to C:\Program Files (x86)\Inno Setup 6\Languages\
        run: copy-item -Path windows\Languages\Unofficial\*.isl -Destination 'C:\Program Files (x86)\Inno Setup 6\Languages\'
        working-directory: ${{ env.source-path }}

      - name: Install fastforge
        run: dart pub global activate fastforge
        working-directory: ${{ env.source-path }}

      - name: Install yq
        shell: pwsh
        run: |
          choco install yq
          yq --version

      - name: Update config
        shell: pwsh
        run: |
          $yamlFile = ".\windows\packaging\exe\make_config.yaml"
          $yamlContent = Get-Content -Raw -Path $yamlFile

          # 获取环境变量的值
          $appId = (Get-Item -Path Env:WINDOWS_EXE_APP_ID).Value
          $publisherName = (Get-Item -Path Env:WINDOWS_PUBLISHER_NAME).Value

          # 使用 yq 更新多个字段
          $updatedYamlContent = echo $yamlContent | yq e ".app_id = `"$appId`" | .publisher_name = `"$publisherName`"" -

          # 将更新后的内容写回文件
          Set-Content -Path $yamlFile -Value $updatedYamlContent
        env:
          WINDOWS_EXE_APP_ID: ${{ secrets.WINDOWS_EXE_APP_ID }}
          WINDOWS_PUBLISHER_NAME: ${{ secrets.WINDOWS_PUBLISHER_NAME }}
        working-directory: ${{ env.source-path }}

      - name: Build exe
        shell: pwsh
        run: |
          fastforge package `
            --flutter-build-args "dart-define-from-file=.env,build-name=$env:VERSION,build-number=$env:BUILD_NUMBER" `
            --platform windows `
            --targets exe `
            --artifact-name "{{name}}-$env:RELEASE-{{platform}}-setup-$env:Platform.{{ext}}"
        env:
          VERSION: ${{ needs.create-release.outputs.version }}
          BUILD_NUMBER: ${{ needs.create-release.outputs.build_number }}
          RELEASE: ${{ needs.create-release.outputs.release }}
        working-directory: ${{ env.source-path }}

      - name: Signing
        run: |
          echo $env:RUNNER_TEMP
          $certificatePath = "$env:RUNNER_TEMP\voicemeet.pfx"
          # https://stackoverflow.com/questions/15414678/how-to-decode-a-base64-string
          # https://stackoverflow.com/questions/66239147/pfx-encoded-and-back-to-pfx-in-powershell
          $bytes = echo $env:WINDOWS_CERTIFICATE | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$certificatePath", $bytes)
          $signtool = "C:\Program Files (x86)\Microsoft SDKs\ClickOnce\SignTool\signtool.exe"
          & $signtool sign /f "$certificatePath" /fd SHA256 /t http://timestamp.comodoca.com/authenticode /p "$env:WINDOWS_CERTIFICATE_PASSWORD" /n "$env:WINDOWS_PUBLISHER_NAME" (get-item ".\**\*.exe")
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
          WINDOWS_PUBLISHER_NAME: ${{ secrets.WINDOWS_PUBLISHER_NAME }}
        working-directory: ${{ env.source-path }}\dist

      # Package the build.
      - name: Copy build for exe
        run: cp .\**\*.exe "$env:GITHUB_WORKSPACE\${{ env.main-path }}\"
        working-directory: ${{ env.source-path }}\dist

      - name: Upload assets
        run: |
          # https://github.com/cli/cli/issues/5099
          gh release upload "$env:TAG_NAME" (get-item .\*.exe)
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.VM_RELEASE_TOKEN }}
        working-directory: ${{ env.main-path }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if (test-path -Path "$env:RUNNER_TEMP\voicemeet.pfx") {
            echo "$env:RUNNER_TEMP\voicemeet.pfx"
            remove-item -Path "$env:RUNNER_TEMP\voicemeet.pfx" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($env:RUNNER_TEMP\voicemeet.pfx) doesn't exist."
          }
          
          if (test-path -Path "$pwd\.env") {
            echo "Remove file($pwd\.env)"
            remove-item -Path "$pwd\.env" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($pwd\.env) doesn't exist."
          }
        working-directory: ${{ env.source-path }}

  windows-msi:
    name: Create windows msi
    runs-on: windows-2022
    env:
      Platform: x64
      Configuration: Release
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4
        with:
          path: ${{ env.main-path }}

      - uses: actions/checkout@v4
        with:
          repository: ${{ env.repository }}
          token: ${{ secrets.VM_RELEASE_TOKEN }}
          path: ${{ env.source-path }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ needs.create-release.outputs.flutter_channel }}
          flutter-version: ${{ needs.create-release.outputs.flutter_version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install yq
        shell: pwsh
        run: |
          choco install yq
          yq --version

      - name: Install wix toolset
        shell: pwsh
        run: |
          dotnet tool install --global wix --version 4.0.5
          wix --version

      - name: Configure .env
        run: |
          echo "$pwd"
          $bytes = echo "$env:ENV_STG_BASE64" | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$pwd\.env", $bytes)
        env:
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64_WINDOWS }}
        working-directory: ${{ env.source-path }}

      - name: copy eula.rtf to the windows folder
        run: Copy-Item -Path "$pwd\macos\packaging\base\eula.rtf" -Destination "$pwd\windows\LICENSE.rtf" -Force
        working-directory: ${{ env.source-path }}

      - name: Install yq
        shell: pwsh
        run: |
          choco install yq
          yq --version

      - name: Install flutter dependencies
        run: flutter pub get
        working-directory: ${{ env.source-path }}

      - name: Build windows
        run: flutter build windows --dart-define-from-file=.env --build-name=$env:VERSION --build-number $env:BUILD_NUMBER
        env:
          VERSION: ${{ needs.create-release.outputs.version }}
          BUILD_NUMBER: ${{ needs.create-release.outputs.build_number }}
        working-directory: ${{ env.source-path }}

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Create msi
        shell: pwsh
        run: |
          echo $env:RUNNER_TEMP
          $certificatePath = "$env:RUNNER_TEMP\voicemeet.pfx"
          # https://stackoverflow.com/questions/15414678/how-to-decode-a-base64-string
          # https://stackoverflow.com/questions/66239147/pfx-encoded-and-back-to-pfx-in-powershell
          $bytes = echo $env:WINDOWS_CERTIFICATE | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$certificatePath", $bytes)

          $env:IconPath = "$pwd\windows\runner\resources\app_icon.ico"
          $env:FLUTTER_BUILD_OUTPUT_DIR = "$pwd\build\windows\$env:Platform\runner\Release"
          $env:LicensePath = "$env:FLUTTER_BUILD_OUTPUT_DIR\LICENSE.rtf"
          
          pushd ./msi

          python preprocess.py --arp -d ../build/windows/$env:Platform/runner/Release -i ../windows/runner/resources/app_icon.ico -v "$env:VERSION.$env:BUILD_NUMBER"
          nuget restore voicemeet.sln
          msbuild voicemeet.sln -p:Configuration="$env:Configuration" -p:Platform="$env:Platform" /p:TargetVersion=Windows10

          $signtool = "C:\Program Files (x86)\Microsoft SDKs\ClickOnce\SignTool\signtool.exe"
          & $signtool sign /v /f "$certificatePath" /fd SHA256 /t http://timestamp.comodoca.com/authenticode /p "$env:WINDOWS_CERTIFICATE_PASSWORD" /n "$env:WINDOWS_PUBLISHER_NAME" (get-item ".\voicemeet\bin\$env:Platform\$env:Configuration\*\*.msi")
        env:
          VERSION: ${{ needs.create-release.outputs.version }}
          BUILD_NUMBER: ${{ needs.create-release.outputs.build_number }}
          WINDOWS_PUBLISHER_NAME: ${{ secrets.WINDOWS_PUBLISHER_NAME }}
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        working-directory: ${{ env.source-path }}

      # Package the build.
      - name: Copy build for msi
        shell: pwsh
        run: |
          Rename-Item -Path "$pwd\msi\voicemeet\bin\$env:Platform\$env:Configuration\en-us\voicemeet.msi" -NewName "voicemeet-$env:RELEASE-windows-$env:Platform-en-US.msi"
          Rename-Item -Path "$pwd\msi\voicemeet\bin\$env:Platform\$env:Configuration\zh-cn\voicemeet.msi" -NewName "voicemeet-$env:RELEASE-windows-$env:Platform-zh-CN.msi"
          cp ".\msi\voicemeet\bin\$env:Platform\$env:Configuration\*\*.msi" "$env:GITHUB_WORKSPACE\${{ env.main-path }}\"
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}
        working-directory: ${{ env.source-path }}

      - name: Upload assets
        run: |
          # https://github.com/cli/cli/issues/5099
          gh release upload "$env:TAG_NAME" (get-item .\*.msi)
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.VM_RELEASE_TOKEN }}
        working-directory: ${{ env.main-path }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if (test-path -Path "$env:RUNNER_TEMP\voicemeet.pfx") {
            echo "$env:RUNNER_TEMP\voicemeet.pfx"
            remove-item -Path "$env:RUNNER_TEMP\voicemeet.pfx" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($env:RUNNER_TEMP\voicemeet.pfx) doesn't exist."
          }
          if (test-path -Path "$pwd\.env") {
            echo "Remove file($pwd\.env)"
            remove-item -Path "$pwd\.env" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($pwd\.env) doesn't exist."
          }
        working-directory: ${{ env.source-path }}

  windows-msix:
    name: Create windows msix
    runs-on: windows-2022
    env:
      Platform: x64
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4
        with:
          path: ${{ env.main-path }}

      - uses: actions/checkout@v4
        with:
          repository: ${{ env.repository }}
          token: ${{ secrets.VM_RELEASE_TOKEN }}
          path: ${{ env.source-path }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ needs.create-release.outputs.flutter_channel }}
          flutter-version: ${{ needs.create-release.outputs.flutter_version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          $bytes = echo "$env:ENV_STG_BASE64" | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$pwd\.env", $bytes)
        env:
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64_WINDOWS }}
        working-directory: ${{ env.source-path }}

      - name: copy eula.rtf to the windows folder
        run: Copy-Item -Path "$pwd\macos\packaging\base\eula.rtf" -Destination "$pwd\windows\LICENSE.rtf" -Force
        working-directory: ${{ env.source-path }}

      - name: Install yq
        shell: pwsh
        run: |
          choco install yq
          yq --version

      - name: Update config
        shell: pwsh
        run: |
          echo $env:RUNNER_TEMP
          # https://stackoverflow.com/questions/15414678/how-to-decode-a-base64-string
          # https://stackoverflow.com/questions/66239147/pfx-encoded-and-back-to-pfx-in-powershell
          # $certificatePath = "$env:RUNNER_TEMP\voicemeet.pfx"
          # $bytes = echo $env:WINDOWS_CERTIFICATE | %{[Convert]::FromBase64String($_)}
          # [IO.File]::WriteAllBytes("$certificatePath", $bytes)

          $yamlFile = ".\pubspec.yaml"
          $yamlContent = Get-Content -Raw -Path $yamlFile

          # 获取环境变量的值
          $identityName = (Get-Item -Path Env:WINDOWS_IDENTITY_NAME).Value
          $publisher = (Get-Item -Path Env:WINDOWS_PUBLISHER).Value
          $publisherName = (Get-Item -Path Env:WINDOWS_PUBLISHER_NAME).Value
          # $certificatePassword = (Get-Item -Path Env:WINDOWS_CERTIFICATE_PASSWORD).Value

          # 使用 yq 更新多个字段
          $updatedYamlContent = echo $yamlContent | yq e ".msix_config.identity_name = `"$identityName`" | .msix_config.publisher = `"$publisher`" | .msix_config.publisher_display_name = `"$publisherName`" | del(.msix_config.certificate_path) | del(.msix_config.certificate_password)" -

          # 将更新后的内容写回文件
          Set-Content -Path $yamlFile -Value $updatedYamlContent
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
          WINDOWS_IDENTITY_NAME: ${{ secrets.WINDOWS_IDENTITY_NAME }}
          WINDOWS_PUBLISHER: ${{ secrets.WINDOWS_PUBLISHER }}
          WINDOWS_PUBLISHER_NAME: ${{ secrets.WINDOWS_PUBLISHER_NAME }}
        working-directory: ${{ env.source-path }}

      - name: Install flutter dependencies
        run: flutter pub get
        working-directory: ${{ env.source-path }}

      - name: Build windows
        run: flutter build windows --dart-define-from-file=.env --build-name=$env:VERSION --build-number $env:BUILD_NUMBER
        env:
          VERSION: ${{ needs.create-release.outputs.version }}
          BUILD_NUMBER: ${{ needs.create-release.outputs.build_number }}
        working-directory: ${{ env.source-path }}

      - name: Create msix
        run: dart run msix:create --store --build-windows false --output-name "voicemeet-$env:RELEASE-windows-store-$env:Platform"
        env:
          RELEASE: ${{ needs.create-release.outputs.release }}
        working-directory: ${{ env.source-path }}

      # Package the build.
      - name: Copy build for msix
        run: cp .\*.msix "$env:GITHUB_WORKSPACE\${{ env.main-path }}\"
        working-directory: ${{ env.source-path }}\build\windows\${{ env.Platform }}\runner\Release

      - name: Upload assets
        run: |
          # https://github.com/cli/cli/issues/5099
          gh release upload "$env:TAG_NAME" (get-item .\*.msix)
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.VM_RELEASE_TOKEN }}
        working-directory: ${{ env.main-path }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if (test-path -Path "$env:RUNNER_TEMP\voicemeet.pfx") {
            echo "$env:RUNNER_TEMP\voicemeet.pfx"
            remove-item -Path "$env:RUNNER_TEMP\voicemeet.pfx" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($env:RUNNER_TEMP\voicemeet.pfx) doesn't exist."
          }
          
          if (test-path -Path "windows\packaging\msix\make_config.yaml") {
            echo "windows\packaging\msix\make_config.yaml"
            remove-item -Path "windows\packaging\msix\make_config.yaml" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File(windows\packaging\msix\make_config.yaml) doesn't exist."
          }
          
          if (test-path -Path "$pwd\.env") {
            echo "Remove file($pwd\.env)"
            remove-item -Path "$pwd\.env" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($pwd\.env) doesn't exist."
          }
        working-directory: ${{ env.source-path }}

  windows-zip:
    name: Create windows zip
    runs-on: windows-2022
    env:
      Platform: x64
    needs:
      - create-release
    steps:
      - uses: actions/checkout@v4
        with:
          path: ${{ env.main-path }}

      - uses: actions/checkout@v4
        with:
          repository: ${{ env.repository }}
          token: ${{ secrets.VM_RELEASE_TOKEN }}
          path: ${{ env.source-path }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ needs.create-release.outputs.flutter_channel }}
          flutter-version: ${{ needs.create-release.outputs.flutter_version }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: |
          $bytes = echo "$env:ENV_STG_BASE64" | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$pwd\.env", $bytes)
        env:
          ENV_STG_BASE64: ${{ secrets.ENV_STG_BASE64_WINDOWS }}
        working-directory: ${{ env.source-path }}

      - name: copy eula.rtf to the windows folder
        run: Copy-Item -Path "$pwd\macos\packaging\base\eula.rtf" -Destination "$pwd\windows\LICENSE.rtf" -Force
        working-directory: ${{ env.source-path }}

      - name: Install fastforge
        run: dart pub global activate fastforge
        working-directory: ${{ env.source-path }}

      - name: Build zip
        shell: pwsh
        run: |
          fastforge package `
            --flutter-build-args "dart-define-from-file=.env,build-name=$env:VERSION,build-number=$env:BUILD_NUMBER" `
            --platform windows `
            --targets zip `
            --artifact-name "{{name}}-$env:RELEASE-{{platform}}-portable-$env:Platform.{{ext}}"
        env:
          VERSION: ${{ needs.create-release.outputs.version }}
          BUILD_NUMBER: ${{ needs.create-release.outputs.build_number }}
          RELEASE: ${{ needs.create-release.outputs.release }}
        working-directory: ${{ env.source-path }}

      # Package the build.
      - name: Copy build for zip
        run: cp .\**\*.zip "$env:GITHUB_WORKSPACE\${{ env.main-path }}\"
        working-directory: ${{ env.source-path }}\dist

      - name: Upload assets
        run: |
          # https://github.com/cli/cli/issues/5099
          gh release upload "$env:TAG_NAME" (get-item .\*.zip)
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag_name }}
          GH_TOKEN: ${{ secrets.VM_RELEASE_TOKEN }}
        working-directory: ${{ env.main-path }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if (test-path -Path "$pwd\.env") {
            echo "Remove file($pwd\.env)"
            remove-item -Path "$pwd\.env" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($pwd\.env) doesn't exist."
          }
        working-directory: ${{ env.source-path }}

name: Test macOS pkg

on:
  workflow_dispatch:
    inputs:
      ref:
        type: string
        description: "The branch, tag or SHA to checkout. (default to main)"
        default: "main"
        required: false

# Declare default permissions as readonly.
permissions: read-all

env:
  repository: 'VoiceMeet/voicemeet'
  main-path: 'main'
  source-path: 'voicemeet'

jobs:
  macos-pkg:
    name: Create pkg
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4
        with:
          path: ${{ env.main-path }}

      - uses: actions/checkout@v4
        with:
          repository: ${{ env.repository }}
          ref: ${{ github.event.inputs.ref }}
          token: ${{ secrets.VM_RELEASE_TOKEN }}
          path: ${{ env.source-path }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.32.8'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Configure .env
        run: echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV_KEY: ${{ secrets.ENV_STG_BASE64 }}
        working-directory: ${{ env.source-path }}

      - name: Resolving flutter dependencies
        run: flutter pub get
        working-directory: ${{ env.source-path }}

      - name: Resolving macos dependencies
        run: pod install --repo-update
        working-directory: ${{ env.source-path }}/macos

      - name: Remove build cache
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          xcodebuild clean
        working-directory: ${{ env.source-path }}/macos

      - name: Build macOS
        run: |
          echo "╠ Releasing to app store..."
          flutter build macos --dart-define-from-file=.env
        working-directory: ${{ env.source-path }}

      - name: Install certificates
        run: |
          # create variables
          DEVELOPER_ID_INSTALLER_CERTIFICATE_PATH=$RUNNER_TEMP/build_developerID_installer_certificate.p12
          DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/build_developerID_application_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/kty-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$DEVELOPER_ID_INSTALLER_P12_BASE64_MAC" | base64 --decode --output $DEVELOPER_ID_INSTALLER_CERTIFICATE_PATH
          echo -n "$DEVELOPER_ID_APPLICATION_P12_BASE64_MAC" | base64 --decode --output $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $DEVELOPER_ID_INSTALLER_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $DEVELOPER_ID_APPLICATION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        env:
          DEVELOPER_ID_INSTALLER_P12_BASE64_MAC: ${{ secrets.DEVELOPER_ID_INSTALLER_P12_BASE64_MAC }}
          DEVELOPER_ID_APPLICATION_P12_BASE64_MAC: ${{ secrets.DEVELOPER_ID_APPLICATION_P12_BASE64_MAC }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Code Signing
        run: |
          # https://stackoverflow.com/questions/70991268/how-to-sign-and-notarize-a-pkg-within-a-github-actions-macos-runner
          bash scripts/codesign-pkg.sh "$DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY"
        env:
          DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_APPLICATION_SIGNING_IDENTITY }}
        working-directory: ${{ env.source-path }}

      - name: Build pkg
        run: |
          # https://www.hexnode.com/mobile-device-management/help/how-to-sign-macos-pkg-files-for-deployment-with-hexnode-mdm/
          xcrun pkgbuild --component "./VoiceMeet.app" --install-location /Applications --sign "$DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY" VoiceMeet-unsigned.pkg
          mv VoiceMeet-unsigned.pkg "$GITHUB_WORKSPACE/${{ env.source-path }}/VoiceMeet-unsigned.pkg"
        env:
          DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY }}
        working-directory: ${{ env.source-path }}/build/macos/Build/Products/Release

      - uses: actions/upload-artifact@v4
        with:
          name: unsigned-pkg-artifact
          path: ./VoiceMeet-unsigned.pkg

      - name: Building distribution file
        run: |
          xcrun productbuild --synthesize --product macos/packaging/pkg/requirements --package VoiceMeet-unsigned.pkg distribution.dist
          sed -i '' '2 a\
          \    <title>VoiceMeet</title>\
          \    <license file="eula.rtf"/>\
          ' distribution.dist
        working-directory: ${{ env.source-path }}

      - uses: actions/upload-artifact@v4
        with:
          name: distribution-artifact
          path: ./${{ env.source-path }}/distribution.dist

      - name: Sign pkg
        run: |
          # https://www.hexnode.com/mobile-device-management/help/how-to-sign-macos-pkg-files-for-deployment-with-hexnode-mdm/
          xcrun productbuild --distribution distribution.dist --resources macos/packaging/base --sign "$DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY" VoiceMeet.pkg
        env:
          DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY: ${{ secrets.DEVELOPER_ID_INSTALLER_SIGNING_IDENTITY }}
        working-directory: ${{ env.source-path }}

      - uses: actions/upload-artifact@v4
        with:
          name: pkg-artifact
          path: ./${{ env.source-path }}/VoiceMeet.pkg

#      - name: Check sign status
#        run: |
#          # https://www.hexnode.com/mobile-device-management/help/how-to-sign-macos-pkg-files-for-deployment-with-hexnode-mdm/
#          pkgutil –-check-signature VoiceMeet.pkg

      - name: Notarize & Staple
        run: |
          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious
          echo "Notarize pkg"
          xcrun notarytool submit "VoiceMeet.pkg" --apple-id "$APPLE_ID" --password "$APPLE_PASSWORD" --team-id "$APPLE_TEAM_ID" --output-format "json" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "VoiceMeet.pkg"
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        working-directory: ${{ env.source-path }}

      - name: Set version
        id: version_step
        run: |
          VERSION=$(yq '.version' pubspec.yaml)
          echo "VERSION: $VERSION."

          VERSION_SHORT=$(echo "$VERSION" | sed -e "s/+.*//")
          echo "VERSION_SHORT: $VERSION_SHORT."

          BUILD_NUMBER=$(echo "$VERSION" | sed -e "s/.*+//")
          echo "BUILD_NUMBER: $BUILD_NUMBER."

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_short=$VERSION_SHORT" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
        working-directory: ${{ env.source-path }}

      # Package the build.
      - name: Copy build for pkg
        run: |
          echo "VERSION: $VERSION_SHORT.$BUILD_NUMBER"
          ls -la *.pkg
          test -f VoiceMeet-unsigned.pkg && rm -f VoiceMeet-unsigned.pkg
          mv VoiceMeet.pkg VoiceMeet-"$VERSION_SHORT.$BUILD_NUMBER"-macos-universal.pkg
        env:
          VERSION_SHORT: ${{ steps.version_step.outputs.version_short }}
          BUILD_NUMBER: ${{ steps.version_step.outputs.build_number }}
        working-directory: ${{ env.source-path }}

      - uses: actions/upload-artifact@v4
        with:
          name: stapled-pkg-artifact
          path: ./${{ env.source-path }}/*.pkg

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/kty-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/kty-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/kty-signing.keychain-db
          fi
          rm -f .env
        working-directory: ${{ env.source-path }}
